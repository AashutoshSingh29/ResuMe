import re
import os
from PyPDF2 import PdfReader
from docx import Document
import spacy
from collections import Counter
import docx 


# Load NLP model
nlp = spacy.load("zh_core_web_sm")

# Predefined criteria
JOB_CRITERIA = {
    "keywords": ["Python", "Machine Learning", "Data Analysis", "Team Collaboration", "Project Management"],
    "skills": ["Python", "SQL", "Data Visualization", "Problem Solving", "Communication"],
    "education": ["B.Tech", "MCA", "Computer Science"],
    "format_issues": ["tables", "images", "complex formatting"]
}

# Function to extract text from PDF
def extract_text_from_pdf(filepath):
    reader = PdfReader(filepath)
    text = ""
    for page in reader.pages:
        text += page.extract_text()
    return text

# Function to extract text from Word document
def extract_text_from_docx(filepath):
    doc = Document(filepath)
    return "\n".join([p.text for p in doc.paragraphs])

# Function to parse and analyze resume
def analyze_resume(filepath):
    # Extract text
    if filepath.endswith(".pdf"):
        text = extract_text_from_pdf(filepath)
    elif filepath.endswith(".docx"):
        text = extract_text_from_docx(filepath)
    else:
        raise ValueError("Unsupported file format!")
    
    doc = nlp(text)
    
    # Analysis results
    results = {
        "keyword_matches": [],
        "missing_keywords": [],
        "skills_matches": [],
        "missing_skills": [],
        "education_matches": [],
        "missing_education": [],
        "format_issues": []
    }
    
    # Keyword matching
    resume_keywords = [token.text.lower() for token in doc]
    for keyword in JOB_CRITERIA["keywords"]:
        if keyword.lower() in resume_keywords:
            results["keyword_matches"].append(keyword)
        else:
            results["missing_keywords"].append(keyword)
    
    # Skill matching
    for skill in JOB_CRITERIA["skills"]:
        if skill.lower() in resume_keywords:
            results["skills_matches"].append(skill)
        else:
            results["missing_skills"].append(skill)
    
    # Education matching
    resume_text = text.lower()
    for edu in JOB_CRITERIA["education"]:
        if edu.lower() in resume_text:
            results["education_matches"].append(edu)
        else:
            results["missing_education"].append(edu)
    
    # Format check (basic example)
    if "table" in resume_text or "image" in resume_text:
        results["format_issues"].append("Contains tables or images")
    
    return results, text

# Function to calculate score
def calculate_score(results):
    total_criteria = sum(len(v) for k, v in JOB_CRITERIA.items() if k != "format_issues")
    matched_criteria = len(results["keyword_matches"]) + len(results["skills_matches"]) + len(results["education_matches"])
    score = (matched_criteria / total_criteria) * 100
    return round(score, 2)

# Function to generate feedback
def generate_feedback(results, output_path="feedback.txt"):
    feedback = []
    if results["missing_keywords"]:
        feedback.append(f"Missing Keywords: {', '.join(results['missing_keywords'])}")
    if results["missing_skills"]:
        feedback.append(f"Missing Skills: {', '.join(results['missing_skills'])}")
    if results["missing_education"]:
        feedback.append(f"Missing Education: {', '.join(results['missing_education'])}")
    if results["format_issues"]:
        feedback.append(f"Formatting Issues: {', '.join(results['format_issues'])}")
    
    with open(output_path, "w") as f:
        f.write("\n".join(feedback))
    return output_path

# Main function
def ats_algorithm(filepath):
    results, _ = analyze_resume(filepath)
    score = calculate_score(results)
    feedback_file = generate_feedback(results)
    return score, feedback_file

# Usage
resume_file = r'C:\Users\ILG2KOR\Desktop\Documents\Aashutosh_Resume.pdf'  # Replace with your resume file path
try:
    score, feedback_path = ats_algorithm(resume_file)
    print(f"Resume Score: {score}%")
    print(f"Feedback saved to: {feedback_path}")
except Exception as e:
    print(f"Error: {e}")

